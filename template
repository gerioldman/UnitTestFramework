/**
* @file stub.c
*
* @brief This file contains the stubs for the functions
*
*/
#include "types.h"
#include "lib.h"
#include "UnitExample.h"
TEST_STUB_TYPE TEST_STUB;
void fooA()
{
    TEST_STUB.fooA.callcount++;
    switch (TEST_STUB.fooA.stub_option)
    {
    case STUB_OPTION_VALUE:
        // do nothing as there is no return value
        break;
    case STUB_OPTION_REDIRECT:
        TEST_STUB.fooA.redirectFuncPtr();
        break;
    
    default:
        break;
    }
}

void fooB(void)
{
    TEST_STUB.fooB.callcount++;
    switch (TEST_STUB.fooB.stub_option)
    {
    case STUB_OPTION_VALUE:
        // do nothing as there is no return value
        break;
    case STUB_OPTION_REDIRECT:
        TEST_STUB.fooB.redirectFuncPtr();
        break;
    
    default:
        break;
    }
}

int fooC()
{
    TEST_STUB.fooC.callcount++;
    switch (TEST_STUB.fooC.stub_option)
    {
    case STUB_OPTION_VALUE:
        return TEST_STUB.fooC.returnValue;
        break;
    case STUB_OPTION_REDIRECT:
        return TEST_STUB.fooC.redirectFuncPtr();
        break;
    
    default:
        return 0;
        break;
    }
}

float fooD()
{
    TEST_STUB.fooD.callcount++;
    switch (TEST_STUB.fooD.stub_option)
    {
    case STUB_OPTION_VALUE:
        return TEST_STUB.fooD.returnValue;
        break;
    case STUB_OPTION_REDIRECT:
        return TEST_STUB.fooD.redirectFuncPtr();
        break;
    
    default:
        return 0;
        break;
    }
}

lib_t fooE()
{
    TEST_STUB.fooE.callcount++;
    switch (TEST_STUB.fooE.stub_option)
    {
    case STUB_OPTION_VALUE:
        return TEST_STUB.fooE.returnValue;
        break;
    case STUB_OPTION_REDIRECT:
        return TEST_STUB.fooE.redirectFuncPtr();
        break;
    
    default:
        return ((lib_t){.a = 0, .b = 0,.funcPtr = 0});
        break;
    }
}

int TEST_CALL_UnitExample(int a, int b)
{
    TEST_STUB.UnitExample.callcount++;
    switch (TEST_STUB.UnitExample.stub_option)
    {
    case STUB_OPTION_VALUE:
        return TEST_STUB.UnitExample.returnValue;
        break;
    case STUB_OPTION_REDIRECT:
        return TEST_STUB.UnitExample.redirectFuncPtr(a, b);
        break;
    
    default:
        return 0;
        break;
    }
}

lib_t TEST_CALL_func(void)
{
    TEST_STUB.func.callcount++;
    switch (TEST_STUB.func.stub_option)
    {
    case STUB_OPTION_VALUE:
        return TEST_STUB.func.returnValue;
        break;
    case STUB_OPTION_REDIRECT:
        return TEST_STUB.func.redirectFuncPtr();
        break;
    
    default:
        return ((lib_t){.a = 0, .b = 0,.funcPtr = 0});
        break;
    }
}